import {
  JSON as JSON_TYPE,
  STRING, TEXT,
  DATE, NOW,
  BOOLEAN,
  INTEGER,
  UUIDV1, UUIDV4,
  fn, Op, col, where, literal
} from 'sequelize';
import { STATUSES } from '../enums/common.enum';
import { v4 as uuidv4 } from 'uuid';

import { AVENGER_ADMIN_ROLES, AVENGER_SKILL_STATUS, INTERVIEW_VIEW_STATE, MODELS } from '../enums/avenger.enum';
import { MyModelStatic } from '../interfaces/common.interface';
import {
  sequelizeInst as sequelize,
  common_model_options,
  common_model_fields,
  core_model_options,
} from './_def.model';










/** admin models */

export const Admin = <MyModelStatic> sequelize.define('Admin', {
  ...common_model_fields,

  firstname:           { type: STRING, allowNull: false, defaultValue: '' },
  middlename:          { type: STRING, allowNull: false, defaultValue: '' },
  lastname:            { type: STRING, allowNull: false, defaultValue: '' },
  icon_link:           { type: STRING, allowNull: true, defaultValue: '' },
  icon_id:             { type: STRING, allowNull: true, defaultValue: '' },
  email:               { type: STRING, allowNull: false },
  password:            { type: STRING, allowNull: false },
  phone:               { type: STRING, allowNull: true },
  role:                { type: STRING, allowNull: false, defaultValue: AVENGER_ADMIN_ROLES.ADMINISTRATOR },
  active:              { type: BOOLEAN, allowNull: false, defaultValue: true },
}, common_model_options);


/** END admin models */



/** user model */

export const User = <MyModelStatic> sequelize.define('User', {
  ...common_model_fields,

  username:                            { type: STRING, allowNull: false },
  displayname:                         { type: STRING, allowNull: false, defaultValue: '' },
  email:                               { type: STRING, allowNull: false },
  password:                            { type: STRING, allowNull: false },
  
  phone:                               { type: STRING, allowNull: true, defaultValue: null },
  temp_phone:                          { type: STRING, allowNull: true, defaultValue: null },
  stripe_customer_account_id:          { type: STRING, allowNull: true, defaultValue: null },
  stripe_account_id:                   { type: STRING, allowNull: true, defaultValue: null },
  stripe_account_verified:             { type: BOOLEAN, allowNull: false, defaultValue: false },
  platform_subscription_id:            { type: STRING, allowNull: true, defaultValue: null },

  headline:                            { type: STRING, allowNull: false, defaultValue: '' },
  bio:                                 { type: TEXT, allowNull: false, defaultValue: '' },
  icon_link:                           { type: STRING, allowNull: true, defaultValue: '' },
  icon_id:                             { type: STRING, allowNull: true, defaultValue: '' },

  id_card_front_link:                  { type: STRING, allowNull: true, defaultValue: '' },
  id_card_front_id:                    { type: STRING, allowNull: true, defaultValue: '' },
  id_card_back_link:                   { type: STRING, allowNull: true, defaultValue: '' },
  id_card_back_id:                     { type: STRING, allowNull: true, defaultValue: '' },

  photo_id_link:                       { type: STRING, allowNull: true, defaultValue: '' },
  photo_id_id:                         { type: STRING, allowNull: true, defaultValue: '' },
  wallpaper_link:                      { type: STRING, allowNull: true, defaultValue: '' },
  wallpaper_id:                        { type: STRING, allowNull: true, defaultValue: '' },
  
  allow_messaging:                     { type: BOOLEAN, allowNull: false, defaultValue: true },
  allow_conversations:                 { type: BOOLEAN, allowNull: false, defaultValue: true },
  
  location:                            { type: STRING, allowNull: true, defaultValue: '' },
  location_id:                         { type: STRING, allowNull: true, defaultValue: '' },
  location_json:                       { type: JSON_TYPE, allowNull: true, defaultValue: '' },
  zipcode:                             { type: STRING, allowNull: true, defaultValue: '' },
  city:                                { type: STRING, allowNull: true, defaultValue: '' },
  state:                               { type: STRING, allowNull: true, defaultValue: '' },
  county:                              { type: STRING, allowNull: true, defaultValue: '' },
  country:                             { type: STRING, allowNull: true, defaultValue: '' },

  public:                              { type: BOOLEAN, allowNull: false, defaultValue: true },
  online:                              { type: BOOLEAN, allowNull: false, defaultValue: false },
  cerified:                            { type: BOOLEAN, allowNull: false, defaultValue: false },
  person_verified:                     { type: BOOLEAN, allowNull: false, defaultValue: false },
  email_verified:                      { type: BOOLEAN, allowNull: false, defaultValue: false },
  phone_verified:                      { type: BOOLEAN, allowNull: false, defaultValue: false },
  can_message:                         { type: BOOLEAN, allowNull: false, defaultValue: true },
  can_converse:                        { type: BOOLEAN, allowNull: false, defaultValue: true },
  allow_skill_submissions:             { type: BOOLEAN, allowNull: false, defaultValue: true },
  notifications_last_opened:           { type: DATE, allowNull: false, defaultValue: NOW },
}, common_model_options);

export const Skill = <MyModelStatic> sequelize.define('Skill', {
  ...common_model_fields,

  name:                 { type: STRING, allowNull: false, unique: true },
  status:               { type: STRING, allowNull: false, defaultValue: AVENGER_SKILL_STATUS.ACTIVE },
}, common_model_options);

export const Tag = <MyModelStatic> sequelize.define('Tag', {
  ...common_model_fields,

  name:                 { type: STRING, allowNull: false, unique: true },
  status:               { type: STRING, allowNull: false, defaultValue: AVENGER_SKILL_STATUS.ACTIVE },
}, common_model_options);


/** END user model */




/** Base/Common Tables */

export const Analytic = <MyModelStatic> sequelize.define('Analytic', {
  ...common_model_fields,
  ...core_model_options,
  
  user_id:                   { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  event:                     { type: TEXT, allowNull: true },
}, common_model_options);

export const Mention = <MyModelStatic> sequelize.define('Mention', {
  ...common_model_fields,
  ...core_model_options,

  user_id:                   { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  mentioned_id:              { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
}, common_model_options);

export const Reaction = <MyModelStatic> sequelize.define('Reaction', {
  ...common_model_fields,
  ...core_model_options,

  user_id:              { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  reaction_type:        { type: STRING, allowNull: false, defaultValue: '' },
}, common_model_options);

export const Comment = <MyModelStatic> sequelize.define('Comment', {
  ...common_model_fields,
  ...core_model_options,

  owner_id:             { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  body:                 { type: TEXT, allowNull: false, defaultValue: '' },
}, common_model_options);

export const Reply = <MyModelStatic> sequelize.define('Reply', {
  ...common_model_fields,
  // reply depends on comment; no need for ...core_model_options,

  owner_id:             { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  comment_id:           { type: INTEGER, allowNull: false, references: { model: Comment, key: 'id' } },
  body:                 { type: TEXT, allowNull: false, defaultValue: '' },
}, common_model_options);

export const Rating = <MyModelStatic> sequelize.define('Rating', {
  ...common_model_fields,
  ...core_model_options,

  writer_id:            { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  aspect:               { type: STRING, allowNull: true, defaultValue: true },
  rating:               { type: INTEGER, allowNull: false, defaultValue: 5 },
  title:                { type: STRING, allowNull: false, defaultValue: '' },
  summary:              { type: TEXT, allowNull: false, defaultValue: '' },
  image_link:           { type: STRING, allowNull: true, defaultValue: '' },
  image_id:             { type: STRING, allowNull: true, defaultValue: '' },
}, common_model_options);

export const ContentSkill = <MyModelStatic> sequelize.define('ContentSkill', {
  ...common_model_fields,
  ...core_model_options,

  skill_id:             { type: INTEGER, allowNull: false, references: { model: Skill, key: 'id' } },
}, common_model_options);

export const Photo = <MyModelStatic> sequelize.define('Photo', {
  ...common_model_fields,
  ...core_model_options,

  photo_id:                  { type: TEXT, allowNull: true },
  photo_link:                { type: TEXT, allowNull: true },
  photo_bucket:              { type: TEXT, allowNull: true },
  photo_key:                 { type: TEXT, allowNull: true },
}, common_model_options);

export const Video = <MyModelStatic> sequelize.define('Video', {
  ...common_model_fields,
  ...core_model_options,

  video_id:                  { type: TEXT, allowNull: true },
  video_link:                { type: TEXT, allowNull: true },
  video_bucket:              { type: TEXT, allowNull: true },
  video_key:                 { type: TEXT, allowNull: true },
}, common_model_options);

export const Audio = <MyModelStatic> sequelize.define('Audio', {
  ...common_model_fields,

  audio_id:                  { type: TEXT, allowNull: true },
  audio_link:                { type: TEXT, allowNull: true },
  audio_bucket:              { type: TEXT, allowNull: true },
  audio_key:                 { type: TEXT, allowNull: true },
}, common_model_options);

export const Field = <MyModelStatic> sequelize.define('Field', {
  ...common_model_fields,
  ...core_model_options,

  fieldname:            { type: STRING, allowNull: false, defaultValue: '' },
  fieldvalue:           { type: STRING, allowNull: false, defaultValue: '' },
}, common_model_options);

export const ActionRequest = <MyModelStatic> sequelize.define('ActionRequest', {
  ...common_model_fields,
  ...core_model_options,
  

  from_id:              { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  to_id:                { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  action:               { type: STRING, allowNull: false },
  status:               { type: STRING, allowNull: false, defaultValue: STATUSES.PENDING },
}, common_model_options);

export const Follow = <MyModelStatic> sequelize.define('Follow', {
  ...common_model_fields,
  ...core_model_options,

  user_id:              { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
}, common_model_options);



/** END Base/Common Tables */






export const UserEmailVerification = <MyModelStatic> sequelize.define('UserEmailVerification', {
  ...common_model_fields,

  user_id:                 { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  email:                   { type: STRING, allowNull: false },
  verification_code:       { type: STRING, allowNull: false, unique: true, defaultValue: UUIDV4 },
  verified:                { type: BOOLEAN, allowNull: false, defaultValue: false },
}, common_model_options);




export const UserPhoneVerification = <MyModelStatic> sequelize.define('UserPhoneVerification', {
  ...common_model_fields,

  user_id:                 { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  request_id:              { type: STRING, allowNull: false, unique: true },
  phone:                   { type: STRING, allowNull: false },
  verification_code:       { type: STRING, allowNull: false },
  verified:                { type: BOOLEAN, allowNull: false, defaultValue: false },
}, common_model_options);




export const UserExpoDevice = <MyModelStatic> sequelize.define('UserExpoDevice', {
  ...common_model_fields,

  user_id:              { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  token:                { type: STRING, allowNull: false, defaultValue: '' },
  device_info:          { type: JSON_TYPE, allowNull: true, defaultValue: null },
  device_id:            { type: STRING, allowNull: false, defaultValue: '' },
  device_reaction_type:          { type: STRING, allowNull: false, defaultValue: '' },
  device_platform:      { type: STRING, allowNull: false, defaultValue: '' },
}, common_model_options);




export const UserDevice = <MyModelStatic> sequelize.define('UserDevice', {
  ...common_model_fields,

  user_id:              { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  token:                { type: STRING, allowNull: false, defaultValue: '' },
  device_info:          { type: JSON_TYPE, allowNull: true, defaultValue: null },
  device_id:            { type: STRING, allowNull: false, defaultValue: '' },
  device_reaction_type:          { type: STRING, allowNull: false, defaultValue: '' },
  device_platform:      { type: STRING, allowNull: false, defaultValue: '' },
}, common_model_options);




export const UserResetPasswordRequest = <MyModelStatic> sequelize.define('UserResetPasswordRequest', {
  ...common_model_fields,

  user_id:             { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  completed:           { type: BOOLEAN, allowNull: false, defaultValue: false },
  unique_value:        { type: STRING, allowNull: false, unique: true, defaultValue: UUIDV4 },
}, common_model_options);



export const UserNotification = <MyModelStatic> sequelize.define('UserNotification', {
  ...common_model_fields,

  from_id:             { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  to_id:               { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  event:               { type: STRING, allowNull: false, defaultValue: '' },
  target_type:         { type: STRING, allowNull: false, defaultValue: '' },
  target_id:           { type: INTEGER, allowNull: false, defaultValue: 0 },
  read:                { type: BOOLEAN, allowNull: false, defaultValue: false },
  image_link:          { type: TEXT, allowNull: true, defaultValue: '' },
  image_id:            { type: TEXT, allowNull: true, defaultValue: '' },
}, common_model_options);




export const UserUserNotificationLastOpened = <MyModelStatic> sequelize.define('UserUserNotificationLastOpened', {
  ...common_model_fields,

  user_id:                             { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  notifications_last_opened:           { type: DATE, allowNull: false, defaultValue: NOW },
}, common_model_options);




export const UserAccountHold = <MyModelStatic> sequelize.define('UserAccountHold', {
  ...common_model_fields,

  user_id:                             { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  status:                              { type: STRING, allowNull: false, defaultValue: '' },
  reason:                              { type: STRING, allowNull: false, defaultValue: '' },
}, common_model_options);




export const MessagingRequest = <MyModelStatic> sequelize.define('MessagingRequest', {
  ...common_model_fields,

  user_id:            { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  sender_id:          { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
}, common_model_options);




export const Messaging = <MyModelStatic> sequelize.define('Messaging', {
  ...common_model_fields,

  user_id:            { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  sender_id:          { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
}, common_model_options);



export const Message = <MyModelStatic> sequelize.define('Message', {
  ...common_model_fields,

  from_id:            { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  to_id:              { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  body:               { type: TEXT, allowNull: false },
  opened:             { type: BOOLEAN, allowNull: false, defaultValue: false },
}, common_model_options);




/** stripe models */

export const StripeAction = <MyModelStatic> sequelize.define('StripeAction', {
  ...common_model_fields,

  user_id:                             { type: INTEGER, allowNull: true, references: { model: User, key: 'id' } },
  action_event:                        { type: STRING, allowNull: false }, // charge, refund, transfer
  action_id:                           { type: STRING, allowNull: false },
  action_metadata:                     { type: JSON_TYPE, allowNull: true, defaultValue: '' },
  target_reaction_type:                { type: STRING, allowNull: true, defaultValue: '' },
  target_id:                           { type: INTEGER, allowNull: true, defaultValue: 0 },
  target_metadata:                     { type: JSON_TYPE, allowNull: true, defaultValue: '' },
  status:                              { type: STRING, allowNull: false, defaultValue: '' },
}, common_model_options);






/** user notices (tweets) */

export const Notice = <MyModelStatic> sequelize.define('Notice', {
  ...common_model_fields,

  owner_id:            { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },

  pinned_reply_id:     { type: INTEGER, allowNull: true, references: { model: 'Notice', key: 'id' } },
  parent_notice_id:    { type: INTEGER, allowNull: true, references: { model: 'Notice', key: 'id' } }, // if this notice is a reply to another
  quoting_notice_id:   { type: INTEGER, allowNull: true, references: { model: 'Notice', key: 'id' } }, // if this notice is quoting another
  share_notice_id:     { type: INTEGER, allowNull: true, references: { model: 'Notice', key: 'id' } }, // if this notice is a share of another

  body:                { type: STRING(500), allowNull: true },

  is_explicit:         { type: BOOLEAN, allowNull: false, defaultValue: false },
  is_private:          { type: BOOLEAN, allowNull: false, defaultValue: false },
  visibility:          { type: STRING(75), allowNull: false, defaultValue: '' },
}, { ...common_model_options, tableName: `Notice`, modelName: `Notice` });











/** interview models */

export const Interview = <MyModelStatic> sequelize.define('Interview', {
  ...common_model_fields,

  owner_id:                  { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  interviewer_id:            { type: INTEGER, allowNull: true, references: { model: User, key: 'id' } },
  interviewee_id:            { type: INTEGER, allowNull: true, references: { model: User, key: 'id' } },
  title:                     { type: STRING, allowNull: false },
  description:               { type: TEXT, allowNull: false, defaultValue: '' },
  industry:                  { type: TEXT, allowNull: true, defaultValue: '' },
  skills_accessed:           { type: TEXT, allowNull: false, defaultValue: '' },
  view_state:                { type: STRING, allowNull: false, defaultValue: INTERVIEW_VIEW_STATE.OPEN },
  is_private:                { type: BOOLEAN, allowNull: false, defaultValue: false },
  private_access_fee:        { type: INTEGER, allowNull: true, defaultValue: 0 },
  
  photo_id:                  { type: TEXT, allowNull: true },
  photo_link:                { type: TEXT, allowNull: true },
  photo_bucket:              { type: TEXT, allowNull: true },
  photo_key:                 { type: TEXT, allowNull: true },

  video_id:                  { type: TEXT, allowNull: true },
  video_link:                { type: TEXT, allowNull: true },
  video_bucket:              { type: TEXT, allowNull: true },
  video_key:                 { type: TEXT, allowNull: true },
}, common_model_options);











/** question models */

// used for grouping question models
export const Assessment = <MyModelStatic> sequelize.define('Assessment', {
  ...common_model_fields,

  owner_id:             { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  title:                { type: STRING, allowNull: false, defaultValue: '' },
  description:          { type: TEXT, allowNull: false, defaultValue: '' },
  image_link:           { type: STRING, allowNull: true, defaultValue: '' },
  image_id:             { type: STRING, allowNull: true, defaultValue: '' },
}, common_model_options);




export const Question = <MyModelStatic> sequelize.define('Question', {
  ...common_model_fields,

  owner_id:             { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  assessment_id:        { type: INTEGER, allowNull: true, references: { model: Assessment, key: 'id' } },
  difficulty:           { type: STRING, allowNull: true, defaultValue: '' },
  title:                { type: STRING, allowNull: false, defaultValue: '' },
  description:          { type: TEXT, allowNull: false, defaultValue: '' },
  image_link:           { type: STRING, allowNull: true, defaultValue: '' },
  image_id:             { type: STRING, allowNull: true, defaultValue: '' },
}, common_model_options);



export const Answer = <MyModelStatic> sequelize.define('Answer', {
  ...common_model_fields,

  owner_id:             { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  question_id:          { type: INTEGER, allowNull: false, references: { model: Question, key: 'id' } },
  title:                { type: STRING, allowNull: false, defaultValue: '' },
  description:          { type: TEXT, allowNull: false, defaultValue: '' },
  video_link:           { type: STRING, allowNull: true, defaultValue: '' },
  video_id:             { type: STRING, allowNull: true, defaultValue: '' },
}, common_model_options);






/** Misc */


export const SiteFeedback = <MyModelStatic> sequelize.define('SiteFeedback', {
  ...common_model_fields,

  user_id:             { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  rating:              { type: INTEGER, allowNull: false, defaultValue: 5 },
  title:               { type: TEXT, allowNull: false, defaultValue: '' },
  summary:             { type: TEXT, allowNull: false, defaultValue: '' },
}, common_model_options);




export const ContentReported = <MyModelStatic> sequelize.define('ContentReported', {
  ...common_model_fields,

  user_id:             { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  target_user_id:      { type: INTEGER, allowNull: false, references: { model: User, key: 'id' } },
  target_type:         { type: STRING, allowNull: false, defaultValue: '' },
  target_id:           { type: INTEGER, allowNull: false, defaultValue: 0 },
  category:            { type: STRING, allowNull: false, defaultValue: '' },
  title:               { type: STRING, allowNull: false, defaultValue: '' },
  summary:             { type: TEXT, allowNull: false, defaultValue: '' },
}, common_model_options);




export const ApiKey = <MyModelStatic> sequelize.define('ApiKey', {
  ...common_model_fields,

  key:                 { type: STRING, allowNull: false, defaultValue: uuidv4 },
  firstname:           { type: STRING, allowNull: false, defaultValue: '' },
  middlename:          { type: STRING, allowNull: true, defaultValue: '' },
  lastname:            { type: STRING, allowNull: false, defaultValue: '' },
  email:               { type: STRING, allowNull: false, defaultValue: '' },
  phone:               { type: STRING, allowNull: false, defaultValue: '' },
  website:             { type: STRING, allowNull: false, defaultValue: '' },
  verified:            { type: BOOLEAN, allowNull: false, defaultValue: false },
}, common_model_options);

export const ApiKeyRequest = <MyModelStatic> sequelize.define('ApiKeyRequest', {
  ...common_model_fields,

  api_key_id:          { type: INTEGER, allowNull: false, references: { model: ApiKey, key: 'id' } },
  url:                 { type: STRING, allowNull: false, defaultValue: '' },
  method:              { type: STRING, allowNull: true, defaultValue: '' },
  headers:             { type: TEXT, allowNull: false, defaultValue: '' },
  cookie:              { type: TEXT, allowNull: false, defaultValue: '' },
  body:                { type: TEXT, allowNull: false, defaultValue: '' },
  files:               { type: INTEGER, allowNull: false, defaultValue: 0 },
}, common_model_options);




export const NewsDataCache = <MyModelStatic> sequelize.define('NewsDataCache', {
  ...common_model_fields,

  name:                { type: STRING, allowNull: false, defaultValue: '' },
  json_data:           { type: TEXT, allowNull: false, defaultValue: '' },
}, common_model_options);













/** ------- RELATIONSHIPS ------- */

Comment.hasMany(Reply, { as: 'replies', foreignKey: 'comment_id', sourceKey: 'id' });
Reply.belongsTo(Comment, { as: 'comment', foreignKey: 'comment_id', targetKey: 'id' });
User.hasMany(Reply, { as: 'replies', foreignKey: 'owner_id', sourceKey: 'id' });
Reply.belongsTo(User, { as: 'owner', foreignKey: 'owner_id', targetKey: 'id' });

Comment.hasMany(Reaction, { as: 'reactions', foreignKey: 'target_id', sourceKey: 'id', scope: { [Op.and]: where(col("Reaction.target_type"), Op.eq, MODELS.COMMENT) } });
Reaction.belongsTo(Reaction, { as: 'comment', foreignKey: 'target_id', targetKey: 'id', scope: { [Op.and]: where(col("Reaction.target_type"), Op.eq, MODELS.COMMENT) } });
Reply.hasMany(Reaction, { as: 'reactions', foreignKey: 'target_id', sourceKey: 'id', scope: { [Op.and]: where(col("Reaction.target_type"), Op.eq, MODELS.REPLY) } });
Reaction.belongsTo(Reply, { as: 'reply', foreignKey: 'target_id', targetKey: 'id', scope: { [Op.and]: where(col("Reaction.target_type"), Op.eq, MODELS.REPLY) } });

Comment.hasMany(Analytic, { as: 'analytics', foreignKey: 'target_id', sourceKey: 'id', scope: { [Op.and]: where(col("Analytic.target_type"), Op.eq, MODELS.COMMENT) } });
Analytic.belongsTo(Comment, { as: 'comment', foreignKey: 'target_id', targetKey: 'id', scope: { [Op.and]: where(col("Analytic.target_type"), Op.eq, MODELS.COMMENT) } });
Reply.hasMany(Analytic, { as: 'analytics', foreignKey: 'target_id', sourceKey: 'id', scope: { [Op.and]: where(col("Analytic.target_type"), Op.eq, MODELS.REPLY) } });
Analytic.belongsTo(Reply, { as: 'reply', foreignKey: 'target_id', targetKey: 'id', scope: { [Op.and]: where(col("Analytic.target_type"), Op.eq, MODELS.REPLY) } });




User.hasMany(UserExpoDevice, { as: 'expo_devices', foreignKey: 'user_id', sourceKey: 'id' });
UserExpoDevice.belongsTo(User, { as: 'user', foreignKey: 'user_id', targetKey: 'id' });

User.hasMany(UserNotification, { as: 'to_notifications', foreignKey: 'to_id', sourceKey: 'id' });
UserNotification.belongsTo(User, { as: 'to', foreignKey: 'to_id', targetKey: 'id' });
User.hasMany(UserNotification, { as: 'from_notifications', foreignKey: 'from_id', sourceKey: 'id' });
UserNotification.belongsTo(User, { as: 'from', foreignKey: 'from_id', targetKey: 'id' });

User.hasMany(Message, { as: 'messages_sent', foreignKey: 'from_id', sourceKey: 'id' });
Message.belongsTo(User, { as: 'from', foreignKey: 'from_id', targetKey: 'id' });
User.hasMany(Message, { as: 'messages_received', foreignKey: 'to_id', sourceKey: 'id' });
Message.belongsTo(User, { as: 'to', foreignKey: 'to_id', targetKey: 'id' });

User.hasMany(Analytic, { as: 'analytics', foreignKey: 'user_id', sourceKey: 'id' });
Analytic.belongsTo(User, { as: 'user', foreignKey: 'user_id', targetKey: 'id' });



// User ratings
User.hasMany(Rating, { as: 'user_ratings_received', foreignKey: 'target_id', sourceKey: 'id', scope: { [Op.and]: where(col("Rating.target_type"), Op.eq, MODELS.USER) } });
Rating.belongsTo(User, { as: 'rating_user', foreignKey: 'target_id', targetKey: 'id', scope: { [Op.and]: where(col("Rating.target_type"), Op.eq, MODELS.USER) } });
User.hasMany(Rating, { as: 'user_ratings_written', foreignKey: 'writer_id', sourceKey: 'id', scope: { [Op.and]: where(col("Rating.target_type"), Op.eq, MODELS.USER) } });
Rating.belongsTo(User, { as: 'writer_user', foreignKey: 'writer_id', targetKey: 'id', scope: { [Op.and]: where(col("Rating.target_type"), Op.eq, MODELS.USER) } });



// Tags

Tag.belongsToMany(User, { through: `UserTags` });
User.belongsToMany(Tag, { through: `UserTags` });

Tag.belongsToMany(Rating, { through: `RatingTags` });
Rating.belongsToMany(Tag, { through: `RatingTags` });

Tag.belongsToMany(Notice, { through: `NoticeTags` });
Notice.belongsToMany(Tag, { through: `NoticeTags` });

Tag.belongsToMany(Interview, { through: `InterviewTags` });
Interview.belongsToMany(Tag, { through: `InterviewTags` });

Tag.belongsToMany(Assessment, { through: `AssessmentTags` });
Assessment.belongsToMany(Tag, { through: `AssessmentTags` });

Tag.belongsToMany(Question, { through: `QuestionTags` });
Question.belongsToMany(Tag, { through: `QuestionTags` });

Tag.belongsToMany(Answer, { through: `AnswerTags` });
Answer.belongsToMany(Tag, { through: `AnswerTags` });

Tag.belongsToMany(Comment, { through: `CommentTags` });
Comment.belongsToMany(Tag, { through: `CommentTags` });

Tag.belongsToMany(Reply, { through: `ReplyTags` });
Reply.belongsToMany(Tag, { through: `ReplyTags` });


// Skills
Skill.hasMany(ContentSkill, { as: 'content_skills', foreignKey: 'skill_id', sourceKey: 'id' });
ContentSkill.belongsTo(Skill, { as: 'skill', foreignKey: 'skill_id', targetKey: 'id' });
User.hasMany(ContentSkill, { as: 'skills', foreignKey: 'target_id', sourceKey: 'id', scope: { [Op.and]: where(col("ContentSkill.target_type"), Op.eq, MODELS.USER) } });
ContentSkill.belongsTo(User, { as: 'user', foreignKey: 'target_id', targetKey: 'id', scope: { [Op.and]: where(col("ContentSkill.target_type"), Op.eq, MODELS.USER) } });

ContentSkill.hasMany(Rating, { as: 'content_skill_ratings', foreignKey: 'target_id', sourceKey: 'id', scope: { [Op.and]: where(col("Rating.target_type"), Op.eq, MODELS.CONTENT_SKILL) } });
Rating.belongsTo(ContentSkill, { as: 'content_skill', foreignKey: 'target_id', targetKey: 'id', scope: { [Op.and]: where(col("Rating.target_type"), Op.eq, MODELS.CONTENT_SKILL) } });
User.hasMany(Rating, { as: 'skill_ratings_written', foreignKey: 'writer_id', sourceKey: 'id', scope: { [Op.and]: where(col("Rating.target_type"), Op.eq, MODELS.CONTENT_SKILL) } });
Rating.belongsTo(User, { as: 'writer_content_skill', foreignKey: 'writer_id', targetKey: 'id', scope: { [Op.and]: where(col("Rating.target_type"), Op.eq, MODELS.CONTENT_SKILL) } });



// Notices
User.hasMany(Notice, { as: 'user_notices', foreignKey: 'owner_id', sourceKey: 'id' });
Notice.belongsTo(User, { as: 'owner', foreignKey: 'owner_id', targetKey: 'id' });
Notice.hasOne(Notice, { as: 'pinned_reply', foreignKey: 'pinned_reply_id', sourceKey: 'id' });
Notice.belongsTo(Notice, { as: 'pinned_parent', foreignKey: 'pinned_reply_id', targetKey: 'id' });
Notice.hasMany(Notice, { as: 'notice_replies', foreignKey: 'parent_notice_id', sourceKey: 'id' });
Notice.belongsTo(Notice, { as: 'parent_notice', foreignKey: 'parent_notice_id', targetKey: 'id' });
Notice.hasMany(Notice, { as: 'notice_quotes', foreignKey: 'quoting_notice_id', sourceKey: 'id' });
Notice.belongsTo(Notice, { as: 'quote_notice', foreignKey: 'quoting_notice_id', targetKey: 'id' });
Notice.hasMany(Notice, { as: 'notice_shares', foreignKey: 'share_notice_id', sourceKey: 'id' });
Notice.belongsTo(Notice, { as: 'share_notice', foreignKey: 'share_notice_id', targetKey: 'id' });

Notice.hasMany(Photo, { as: 'notice_photos', foreignKey: 'target_id', sourceKey: 'id', scope: { [Op.and]: where(col("Photo.target_type"), Op.eq, MODELS.NOTICE) } });
Photo.belongsTo(Notice, { as: 'notice', foreignKey: 'target_id', targetKey: 'id', scope: { [Op.and]: where(col("Photo.target_type"), Op.eq, MODELS.NOTICE) } });
Notice.hasMany(Video, { as: 'notice_videos', foreignKey: 'target_id', sourceKey: 'id', scope: { [Op.and]: where(col("Video.target_type"), Op.eq, MODELS.NOTICE) } });
Video.belongsTo(Notice, { as: 'notice', foreignKey: 'target_id', targetKey: 'id', scope: { [Op.and]: where(col("Video.target_type"), Op.eq, MODELS.NOTICE) } });
Notice.hasMany(Audio, { as: 'notice_audios', foreignKey: 'target_id', sourceKey: 'id', scope: { [Op.and]: where(col("Audio.target_type"), Op.eq, MODELS.NOTICE) } });
Audio.belongsTo(Notice, { as: 'notice', foreignKey: 'target_id', targetKey: 'id', scope: { [Op.and]: where(col("Audio.target_type"), Op.eq, MODELS.NOTICE) } });

Notice.hasMany(Analytic, { as: 'analytics', foreignKey: 'target_id', sourceKey: 'id', scope: { [Op.and]: where(col("Analytic.target_type"), Op.eq, MODELS.NOTICE) } });
Analytic.belongsTo(Notice, { as: 'notice', foreignKey: 'target_id', targetKey: 'id', scope: { [Op.and]: where(col("Analytic.target_type"), Op.eq, MODELS.NOTICE) } });

Notice.hasMany(Reaction, { as: 'reactions', foreignKey: 'target_id', sourceKey: 'id', scope: { [Op.and]: where(col("Reaction.target_type"), Op.eq, MODELS.NOTICE) } });
Reaction.belongsTo(Notice, { as: 'notice', foreignKey: 'target_id', targetKey: 'id', scope: { [Op.and]: where(col("Reaction.target_type"), Op.eq, MODELS.NOTICE) } });
User.hasMany(Reaction, { as: 'notice_reactions', foreignKey: 'user_id', sourceKey: 'id', scope: { [Op.and]: where(col("Reaction.target_type"), Op.eq, MODELS.NOTICE) } });
Reaction.belongsTo(User, { as: 'notice_reaction_user', foreignKey: 'user_id', targetKey: 'id', scope: { [Op.and]: where(col("Reaction.target_type"), Op.eq, MODELS.NOTICE) } });

Notice.hasMany(ContentSkill, { as: 'skills', foreignKey: 'target_id', sourceKey: 'id', scope: { [Op.and]: where(col("ContentSkill.target_type"), Op.eq, MODELS.NOTICE) } });
ContentSkill.belongsTo(Notice, { as: 'notice', foreignKey: 'target_id', targetKey: 'id', scope: { [Op.and]: where(col("ContentSkill.target_type"), Op.eq, MODELS.NOTICE) } });





// Interview
User.hasMany(Interview, { as: 'interviews', foreignKey: 'owner_id', sourceKey: 'id' });
Interview.belongsTo(User, { as: 'owner', foreignKey: 'owner_id', targetKey: 'id' });

User.hasMany(Comment, { as: 'user_interview_comments', foreignKey: 'owner_id', sourceKey: 'id', scope: { [Op.and]: where(col("Comment.target_type"), Op.eq, MODELS.INTERVIEW) } });
Comment.belongsTo(User, { as: 'interview_comment_owner', foreignKey: 'owner_id', targetKey: 'id', scope: { [Op.and]: where(col("Comment.target_type"), Op.eq, MODELS.INTERVIEW) } });
Interview.hasMany(Comment, { as: 'comments', foreignKey: 'target_id', sourceKey: 'id', scope: { [Op.and]: where(col("Comment.target_type"), Op.eq, MODELS.INTERVIEW) } });
Comment.belongsTo(Interview, { as: 'interview', foreignKey: 'target_id', targetKey: 'id', scope: { [Op.and]: where(col("Comment.target_type"), Op.eq, MODELS.INTERVIEW) } });

Interview.hasMany(Analytic, { as: 'analytics', foreignKey: 'target_id', sourceKey: 'id', scope: { [Op.and]: where(col("Analytic.target_type"), Op.eq, MODELS.INTERVIEW) } });
Analytic.belongsTo(Interview, { as: 'interview', foreignKey: 'target_id', targetKey: 'id', scope: { [Op.and]: where(col("Analytic.target_type"), Op.eq, MODELS.INTERVIEW) } });

Interview.hasMany(Reaction, { as: 'reactions', foreignKey: 'target_id', sourceKey: 'id', scope: { [Op.and]: where(col("Reaction.target_type"), Op.eq, MODELS.INTERVIEW) } });
Reaction.belongsTo(Interview, { as: 'interview', foreignKey: 'target_id', targetKey: 'id', scope: { [Op.and]: where(col("Reaction.target_type"), Op.eq, MODELS.INTERVIEW) } });
User.hasMany(Reaction, { as: 'interview_reactions', foreignKey: 'user_id', sourceKey: 'id', scope: { [Op.and]: where(col("Reaction.target_type"), Op.eq, MODELS.INTERVIEW) } });
Reaction.belongsTo(User, { as: 'interview_reaction_user', foreignKey: 'user_id', targetKey: 'id', scope: { [Op.and]: where(col("Reaction.target_type"), Op.eq, MODELS.INTERVIEW) } });

User.hasMany(Interview, { as: 'interviews_interviewer', foreignKey: 'interviewer_id', sourceKey: 'id' });
Interview.belongsTo(User, { as: 'interviewer', foreignKey: 'interviewer_id', targetKey: 'id' });
User.hasMany(Interview, { as: 'interviews_interviewee', foreignKey: 'interviewee_id', sourceKey: 'id' });
Interview.belongsTo(User, { as: 'interviewee', foreignKey: 'interviewee_id', targetKey: 'id' });

Interview.hasMany(ContentSkill, { as: 'skills', foreignKey: 'target_id', sourceKey: 'id', scope: { [Op.and]: where(col("ContentSkill.target_type"), Op.eq, MODELS.INTERVIEW) } });
ContentSkill.belongsTo(Interview, { as: 'interview', foreignKey: 'target_id', targetKey: 'id', scope: { [Op.and]: where(col("ContentSkill.target_type"), Op.eq, MODELS.INTERVIEW) } });




// Question / Answer
User.hasMany(Question, { as: 'questions', foreignKey: 'owner_id', sourceKey: 'id' });
Question.belongsTo(User, { as: 'owner', foreignKey: 'owner_id', targetKey: 'id' });

